{"version":3,"sources":["components/Card.js","components/Joke.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Card","characters","useEffect","console","log","className","map","item","index","class","src","thumbnail","path","extension","alt","name","description","Joke","useState","joke","setJoke","navigator","onLine","localStorage","getItem","parser","JSON","parse","personajes","fetch","then","res","json","data","results","personaje","setItem","stringify","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.f52b0e29.chunk.js","sourcesContent":["import React, {useEffect} from 'react'\r\n\r\nexport const Card = ({characters = []}) => {\r\n    useEffect(() => {\r\n        console.log(characters);\r\n    },)\r\n    return (\r\n\r\n        <div className = \"row\">\r\n            {\r\n                characters.map((item, index) =>(\r\n                    <div key ={index} className=\"col\">\r\n                        <div  class=\"card\" >\r\n                            <img class=\"card-img-top\" src = {item.thumbnail.path + \".\"+  item.thumbnail.extension }   alt=\"Card image cap\" />\r\n                            <div class=\"card-body\">\r\n                                <h5 class=\"card-title\">{item.name}</h5>\r\n                                <p class=\"card-text\">Description: {item.description}</p>\r\n                                \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                ))\r\n            }\r\n        </div>\r\n            \r\n        \r\n    )\r\n}","\r\n\r\nimport {useState, useEffect} from 'react';\r\nimport {Card} from './Card';\r\nexport const Joke = () =>{\r\n    const [joke, setJoke] = useState([]);\r\n    useEffect(()=>{\r\n        if(!navigator.onLine){\r\n            if(localStorage.getItem(\"caldo\") === null) {\r\n                setJoke([]);\r\n            } else {\r\n                console.log(localStorage.getItem(\"caldo\"));\r\n                let parser = JSON.parse(localStorage.getItem(\"caldo\"));\r\n                setJoke(parser.personajes);\r\n            }\r\n        }\r\n\r\n            const URL = \"http://gateway.marvel.com/v1/public/characters?limit=100&ts=1&apikey=7824a774959e768a0c1683031eb43a69&hash=0d0a44b0cb2b1ca9952853b4bc96c503\";\r\n            fetch(URL).then(res=>res.json()).then(res=>{\r\n                setJoke(res.data.results);\r\n                const personaje = {\r\n                    personajes : res.data.results\r\n                }\r\n                localStorage.setItem(\"caldo\", JSON.stringify(personaje));\r\n            })\r\n        \r\n    }, []);\r\n\r\nreturn (\r\n    <>\r\n    <div className = \"container mt-5\">\r\n         <h1> Joke </h1>\r\n         <Card characters = {joke} />\r\n    </div>\r\n    </>\r\n );\r\n};","import React from 'react';\n\nimport './App.css';\nimport {Joke} from './components/Joke'\n// http://gateway.marvel.com/v1/public/comics?ts=1&apikey=1234&hash=ffd275c5130566a2916217b101f26150\n// key publica: 7824a774959e768a0c1683031eb43a69\n// key privada : 3ff935d51b09d333e953507881371c310709bc72\n// ts: 1\n// 13ff935d51b09d333e953507881371c310709bc727824a774959e768a0c1683031eb43a69\n// md5-hash : 0d0a44b0cb2b1ca9952853b4bc96c503\nfunction App() {\n  return (\n  <>\n  <Joke />\n  </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}